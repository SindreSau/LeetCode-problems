package problems.medium;

import java.util.Arrays;

/*
* 1343: Number of Subarrays of Size K and Average Greater than or Equal to Threshold
* */
public class Number_of_Subarrays_of_Size_K_and_Average_Greater_than_or_Equal_to_Threshold {
    /*
    Given an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold.

    Example 1:

    Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4
    Output: 3
    Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).
    Example 2:

    Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5
    Output: 6
    Explanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.


    Constraints:

    1 <= arr.length <= 105
    1 <= arr[i] <= 104
    1 <= k <= arr.length
    0 <= threshold <= 104
    */

    public static int numOfSubarrays(int[] arr, int k, int threshold) {
        int count = 0;
        int start = 0;
        int end = k-1;
        int avg = getAvg(arr, start++, end++);
        if (avg >= threshold) count++;

        while (end < arr.length) {
            System.out.println("avg: " + avg);
            avg = getAvg(arr, start++, end++);
            if (avg >= threshold) count++;
        }

        return count;
    }

    private static int getAvg(int[] arr, int start, int end) {
        int sum = 0;
        for (int i = start; i <= end; i++) {
            sum += arr[i];
            System.out.println(i + ": " + arr[i]);
        }
        return sum / (end - start + 1);
    }
}

class Test {
    public static void main(String[] args) {
        int[] arr = {2, 2, 2, 2, 5, 5, 5, 8};
        int count = Number_of_Subarrays_of_Size_K_and_Average_Greater_than_or_Equal_to_Threshold.numOfSubarrays(arr, 3, 4);
        System.out.println("Count: " + count);

        int[] arr2 = {11, 13, 17, 23, 29, 31, 7, 5, 2, 3};
        count = Number_of_Subarrays_of_Size_K_and_Average_Greater_than_or_Equal_to_Threshold.numOfSubarrays(arr2, 3, 5);
        System.out.println("Count: " + count);

        int[] arr3 = {199,4874,1617,5281,682,9486,3689,6969,9312,3613,1063,8328,6114,6276,5239,2235,464,3630,5548,3536,1976,6259,462,4033,9786,3798,4688,9007,4099,4276,4836,9224,6686,3352,4911,1852,7142,9534,3961,1102,6884,7098,3685,6465,9011,9104,3451,4316,5354,3792,6357,2778,9991,5082,1385,3770,2580,887,782,2636,677,6062,3583,8112,9102,2632,4951,3,7468,6275,7455,7054,4338,4683,4937,2037,2784,938,9334,7847,5989,390,4699,8102,878,1397,3159,3736,9826,7710,7379,2450,1424,6133,6809,4347,7921,8480,8976,2566,9207,5530,1272,1500,102,232,4066,1437,7504,7242,7396,2157,1342,4191,6659,41,8677,5009,1169,6304,5868,117,1559,6689,8338,4868,4394,4460,1520,7282,902,4237,6458,7250,3442,5847,3070,6453,3603,3573,2191,5684,7044,3761,7351,5415,7109,2650,3507,4364,5826,9047,8795,4912,8633,876,5691,6119,907,61,1735,1722,4225,7857,7306,9921,2402,9286,8997,4959,210,923,8348,184,954,8537,1954,8031,281,203,1607,3198,3475,7030,7701,8848,2441,8838,4513,7342,5330,2898,2332,8967,5940,6809,9376,9562,2871,5633,2131,585,2792,1133,2099,6758,8906,4572,4441,28,7522,2750,8271,8704,9426,5375,9262,8658,9680,318,7130,7824,3591,9826,5802,5842,8314,8848,9979,1416,8784,4682,9195,6272,9633,4141,2964,1652,1447,9583,7331,2916,356,9459,7536,3479,2570,6301,9115,8577,8250,3095,7740,7890,6754,5147,7291,3199,3407,1671,3590,1840,9616,9853,7308,3970,5152,4149,9766,7029,1062,6793,3572,6547,2837,458,8837,8768,7717,6135,5171,3068,222,1748,4608,5490,1172,3024,593,6259,5577,62,3923,5120,6986,1106,5717,5124,8643,4162,3481,4372,1399,9402,2445,2327,8613,8369,3916,2979,3418,540,7321,2513,3343,8724,5170,5804,9303,6034,4931,7069,6942,7005,9788,4497,6310,9334,5066,4294,1233,7753,4894,7262,9309,6333,2910,8386,3792,5841,3702,7166,9206,1682,1686,4870,5410,5055,8500,7644,8992,1301,3867,9863,4638,6457,8021,7723,2934,2007,5311,1762,7001,9388,2649,822,3982,3367,2309,6511,5036,8251,7800,6821,2289,6276,37,1113,267,1951,1880,7549,6666,2753,3723,3527,2774,6380,7495,7842,7139,4955,800,157,1129,1378,6456,9991,8994,3513,4197,4475,502,7405,2071,5898,5951,5174,8008,8383,3428,6474,8403,2416,7942,6491,2461,3761,7150,6425,3490,2075,3042,5671,7549,8225,6336,5045,8001,4639,6000,6571,6955,6461,755,9013,3300,6471,916,6123,3077,2333,9485,3553,1269,4214,1277,2032,6036,8581,2855,4337,4331,6400,1485,5609,6095,9353,7743,1933,5594,5774,9614,9147,6807,4560,3837,8818,5175,7380,2,7320,2742,9850,6982,6423,4083,8207,2914,7958,5646,7930,7406,5172,2179,4443,5848,7710,667,6275,4220,3014,4912,1822,1644,3804,485,4337,7267,2872,1883,7617,4288,7447,6842,7109,3040,7588,1885,7474,6997,9122,2278,3960,7589,2227,9783,4416,7823,3727,7249,752,5571,7897,9183,9886,2300,6291,5192,3451,4137,5784,9339,3229,8822,238,789,7763,2370,8361,7672,9715,4159,9364,1444,740,451,3002,1146,5077,7532,5490,3990,8122,6165,7350,2070,3431,7525,5084,5870,5790,7565,5438,5660,5049,4910,561,4859,9629,1269,1119,6985,1563,4540,7328,653,9464,5673,6759,3119,5875,3078,9498,4231,9517,3093,4384,1102,7487,2303,4351,1182,3478,2073,6345,628,3726,638,6527,6483,4678,1587,6028,3823,2151,7978,751,9760,8551,2101,1581,5252,4364,6415,1303,8327,5978,9445,1022,1043,1408,5516,9387,3451,8934,7358,4799,9248,3588,9947,6234,9616,7450,9925,8544,3016,9029,1949,8674,8254,7464,3843,3151,8999,4049,3413,8168,5706,4634,4378,2156,7187,7492,1219,2176,202,3651,7806,9845,9067,8650,7379,5273,8316,8263,7316,4078,177,5194,1681,1524,1820,2077,6645,8090,6359,8283,6289,2929,4796,1165,1310,2993,943,7805,1716,289,893,115,7608,8171,580,3659,2461,4732,8618,9589,6490,8903,3052,1815,4602,9050,3395,8945,3456,8837,192,1398,4477,1415,4229,7457,8149,2095,6414,6797,1954,9270,2722,1217,9267,7026,772,2764,8767,4405,8079,6536,517,941,4392,588,7066,9002,7409,2909,1204,2425,4933,6541,3423,607,1808,7560,5990,6315,4828,1997,4915,2872,6298,1506,5372,3182,3071,6974,3203,3106,9791,9806,7938,6207,3920,9397,3530,1287,936,1670,5787,4391,6044,5901,9094,4154,1116,6960,3048,9129,9670,978,9885,3799,4597,3842,2891,6060,3295,7052,7721,424,1702,1096,3675,766,3728,3076,9241,1286,122,3506,3698,8681,8646,7084,70,4680,4495,8531,1469,9377,7267,1725,1877,124,9249,8172};
        count = Number_of_Subarrays_of_Size_K_and_Average_Greater_than_or_Equal_to_Threshold.numOfSubarrays(arr3, 336, 271);
        System.out.println("Count: " + count);
    }
}